import { SvelteComponent } from "svelte";
import type { FileRouter } from "uploadthing/server";
import type { StyleField } from "@uploadthing/shared";
import type { UploadthingComponentProps } from "../types";
declare class __sveltets_Render<TRouter extends FileRouter, TEndpoint extends keyof TRouter> {
    props(): {
        [x: string]: any;
        uploader: UploadthingComponentProps<TRouter, TEndpoint>;
        appearance?: {
            container?: StyleField<{
                __runtime: "svelte";
                ready: boolean;
                isUploading: boolean;
                uploadProgress: number;
                fileTypes: string[];
                files: File[];
            }> | undefined;
            button?: StyleField<{
                __runtime: "svelte";
                ready: boolean;
                isUploading: boolean;
                uploadProgress: number;
                fileTypes: string[];
                files: File[];
            }> | undefined;
            allowedContent?: StyleField<{
                __runtime: "svelte";
                ready: boolean;
                isUploading: boolean;
                uploadProgress: number;
                fileTypes: string[];
                files: File[];
            }> | undefined;
            clearBtn?: StyleField<{
                __runtime: "svelte";
                ready: boolean;
                isUploading: boolean;
                uploadProgress: number;
                fileTypes: string[];
                files: File[];
            }> | undefined;
        } | undefined;
        onChange?: ((files: File[]) => void) | undefined;
        disabled?: boolean | undefined;
    };
    events(): {} & {
        [evt: string]: CustomEvent<any>;
    };
    slots(): {
        'button-content': {
            state: {
                __runtime: "svelte";
                ready: boolean;
                isUploading: boolean;
                uploadProgress: number;
                fileTypes: string[];
                files: File[];
            };
        };
        'clear-btn': {
            state: {
                __runtime: "svelte";
                ready: boolean;
                isUploading: boolean;
                uploadProgress: number;
                fileTypes: string[];
                files: File[];
            };
        };
        'allowed-content': {
            state: {
                __runtime: "svelte";
                ready: boolean;
                isUploading: boolean;
                uploadProgress: number;
                fileTypes: string[];
                files: File[];
            };
        };
    };
}
export type UploadButtonProps<TRouter extends FileRouter, TEndpoint extends keyof TRouter> = ReturnType<__sveltets_Render<TRouter, TEndpoint>['props']>;
export type UploadButtonEvents<TRouter extends FileRouter, TEndpoint extends keyof TRouter> = ReturnType<__sveltets_Render<TRouter, TEndpoint>['events']>;
export type UploadButtonSlots<TRouter extends FileRouter, TEndpoint extends keyof TRouter> = ReturnType<__sveltets_Render<TRouter, TEndpoint>['slots']>;
/**
 * Example:
 * ```tsx
 * <UploadButton {uploader} />
 * ```
 */
export default class UploadButton<TRouter extends FileRouter, TEndpoint extends keyof TRouter> extends SvelteComponent<UploadButtonProps<TRouter, TEndpoint>, UploadButtonEvents<TRouter, TEndpoint>, UploadButtonSlots<TRouter, TEndpoint>> {
}
export {};
