import type { FileRouter } from "uploadthing/server";
import type { EndpointArg, inferEndpointInput } from "uploadthing/types";
import type { GenerateTypedHelpersOptions, UploadthingComponentProps, UseUploadthingProps } from "./types";
export declare const INTERNAL_createUploadThingGen: <TRouter extends FileRouter>(initOpts: {
    /**
     * URL to the UploadThing API endpoint
     * @example URL { http://localhost:3000/api/uploadthing }
     * @example URL { https://www.example.com/api/uploadthing }
     */
    url: URL;
}) => <TEndpoint extends keyof TRouter>(endpoint: EndpointArg<TRouter, TEndpoint>, opts?: UseUploadthingProps<TRouter[TEndpoint]>) => {
    readonly startUpload: (...args: undefined extends inferEndpointInput<TRouter[TEndpoint]> ? [files: File[], input?: undefined | undefined] : [files: File[], input: inferEndpointInput<TRouter[TEndpoint]>]) => Promise<import("uploadthing/types").ClientUploadedFileData<import("uploadthing/types").inferEndpointOutput<TRouter[TEndpoint]>>[] | undefined>;
    readonly isUploading: import("svelte/store").Readable<boolean>;
    readonly routeConfig: import("svelte/store").Readable<import("@uploadthing/shared").ExpandedRouteConfig | undefined>;
    /**
     * @deprecated Use `routeConfig` instead
     */
    readonly permittedFileInfo: {
        slug: TEndpoint;
        config: import("svelte/store").Readable<import("@uploadthing/shared").ExpandedRouteConfig | undefined>;
    } | undefined;
};
export declare const generateSvelteHelpers: <TRouter extends FileRouter>(initOpts?: GenerateTypedHelpersOptions) => {
    readonly uploadFiles: <TEndpoint extends keyof TRouter>(slug: EndpointArg<TRouter, TEndpoint>, opts: Omit<import("uploadthing/types").UploadFilesOptions<TRouter[TEndpoint]>, keyof import("uploadthing/types").GenerateUploaderOptions>) => Promise<import("uploadthing/types").ClientUploadedFileData<import("uploadthing/types").inferEndpointOutput<TRouter[TEndpoint]>>[]>;
    readonly createUpload: <TEndpoint extends keyof TRouter, TServerOutput = import("uploadthing/types").inferEndpointOutput<TRouter[TEndpoint]>>(slug: EndpointArg<TRouter, TEndpoint>, opts: Omit<import("uploadthing/types").CreateUploadOptions<TRouter[TEndpoint]>, keyof import("uploadthing/types").GenerateUploaderOptions>) => Promise<{
        pauseUpload: (file?: File) => void;
        resumeUpload: (file?: File) => void;
        done: <T extends File | void = void>(file?: T | undefined) => Promise<T extends File ? import("uploadthing/types").ClientUploadedFileData<TServerOutput> : import("uploadthing/types").ClientUploadedFileData<TServerOutput>[]>;
    }>;
    readonly routeRegistry: import("uploadthing/types").RouteRegistry<TRouter>;
    readonly createUploadThing: <TEndpoint extends keyof TRouter>(endpoint: EndpointArg<TRouter, TEndpoint>, opts?: UseUploadthingProps<TRouter[TEndpoint]> | undefined) => {
        readonly startUpload: (...args: undefined extends inferEndpointInput<TRouter[TEndpoint]> ? [files: File[], input?: (inferEndpointInput<TRouter[TEndpoint]> & undefined) | undefined] : [files: File[], input: inferEndpointInput<TRouter[TEndpoint]>]) => Promise<import("uploadthing/types").ClientUploadedFileData<import("uploadthing/types").inferEndpointOutput<TRouter[TEndpoint]>>[] | undefined>;
        readonly isUploading: import("svelte/store").Readable<boolean>;
        readonly routeConfig: import("svelte/store").Readable<import("@uploadthing/shared").ExpandedRouteConfig | undefined>;
        /**
         * @deprecated Use `routeConfig` instead
         */
        readonly permittedFileInfo: {
            slug: TEndpoint;
            config: import("svelte/store").Readable<import("@uploadthing/shared").ExpandedRouteConfig | undefined>;
        } | undefined;
    };
    readonly createUploader: <TEndpoint extends keyof TRouter>(endpoint: EndpointArg<TRouter, TEndpoint>, props: Omit<UploadthingComponentProps<TRouter, TEndpoint>, "endpoint">) => {
        endpoint: EndpointArg<TRouter, TEndpoint>;
    } & Omit<UploadthingComponentProps<TRouter, TEndpoint>, "endpoint">;
};
